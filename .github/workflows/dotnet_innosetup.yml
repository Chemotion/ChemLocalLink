name: .NET and Installer

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      commit_message:
        description: 'Commit message for testing release'
        required: true
        default: 'Test release'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: "8.0.*"
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Check commit message for release and version
      id: check_installer
      shell: pwsh
      run: |
        if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch') {
          $commit_message = "${{ github.event.inputs.commit_message }}"
        } else {
          $commit_message = "${{ github.event.head_commit.message }}"
        }
        Write-Output "Commit message: $commit_message"
        if ($commit_message -match "\[Release\]") {
          echo "create=true" >> $GITHUB_ENV
        } else {
          echo "create=false" >> $GITHUB_ENV
        }
        if ($commit_message -match "\[version:(.*?)\]") {
          $version = $matches[1]
        } else {
          $version = "0.0.0"
        }
        echo "version=$version" >> $GITHUB_ENV

    - name: Update version in csproj
      if: env.create == 'true'
      run: |
        sed -i 's#<Version>.*</Version>#<Version>${{ env.version }}</Version>#' *.csproj

    - name: Update version in iss file
      if: env.create == 'true'
      run: |
        sed -i 's/#define AppVersion ".*"/#define AppVersion "${{ env.version }}"/' .winbuild/urlhandler.iss

    - name: Commit version updates
      if: env.create == 'true'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add *.csproj .winbuild/urlhandler.iss
        git commit -m "Update version to ${{ env.version }}"

    - name: Push version updates
      if: env.create == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: git push origin HEAD:main

    - name: Publish project
      if: env.create == 'true'
      run: |
        dotnet publish -p:PublishSingleFile=true --self-contained false
        ren "bin\Release\net8.0-windows10.0.17763.0\win-x64\publish\urlhandler.exe" "URL-Handler.exe"

    - name: Build Installer
      if: env.create == 'true'
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
      with:
        path: .winbuild/urlhandler.iss

    - name: Create GitHub Release
      if: env.create == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.version }}
        release_name: Release ${{ env.version }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: env.create == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: C:/app/build/URL-Handler-${{ env.version }}.exe
        asset_name: URL-Handler-Setup-${{ env.version }}.exe
        asset_content_type: application/octet-stream

    - name: Upload Artifact
      if: env.create == 'true'
      uses: actions/upload-artifact@v2
      with:
        name: Setup
        path: C:/app/build/URL-Handler-${{ env.version }}.exe
